<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_556309_microsoft.updateChangedIncidents</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>updateChangedIncidents</name>
        <script><![CDATA[function updateChangedIncidents (environment, modifiedIncidents, modifiedLastSync) {
    
    var incidentTable = gs.getProperty('x_556309_microsoft.incidentTableName');
    var incidentUniqueKey = gs.getProperty('x_556309_microsoft.incidentUniqueKey');
    var updatedIncidents = 0;
    var addedComments;
    var myObj;
    var changes;
    var newComments = [];
    var utils = new AppUtils();


    for (var i = 0; i < modifiedIncidents.length; i++) {

        addedComments = 0;
        myObj = new GlideRecord(incidentTable);
        myObj.addQuery(incidentUniqueKey, modifiedIncidents[i].name);
        myObj.query();

        if(myObj.next()) {
            
            changes = compareChanges(modifiedIncidents[i].properties, myObj);

            if(Object.keys(changes).length > 0) {
                
                
                if(changes.hasOwnProperty('severitySentinel')) {
                    myObj.impact = utils.getServiceNowSeverity(incidents[i].properties.severity);
                }

                if(changes.hasOwnProperty('statusSentinel')) { 
                    myObj.incident_state = utils.getServiceNowState(incidents[i].properties.status);
                    if(incidents[i].properties.status.toLowerCase() == 'closed') {
                        myObj.close_code = 'Closed/Resolved By Caller';
                        myObj.close_notes = 'Incident was already closed in Sentinel. \nIncident classification: ' + incidents[i].properties.classification + '\nClose comment: ' + incidents[i].properties.classificationComment;
                    }
                }

                if(changes.hasOwnProperty('ownerSentinel')) {
                    if(modifiedIncidents[i].properties.owner.userPrincipalName) {
                        myObj.assigned_to = modifiedIncidents[i].properties.owner.userPrincipalName;
                    }
                }
                
                try {
                    myObj.setWorkflow(false);
                    myObj.update();
                    updatedIncidents++;
                    utils.log('Incident ' + myObj.number + ' has been updated\nChanges: ' + JSON.stringify(changes));
                }
                catch(ex) {
                    var message = ex.message;
                    utils.log('ERROR: Incident ' + myObj.number + ' update failed\n' + message);
                }
            }
            
            // add comments sync
            newComments = getIncidentComments(environment, modifiedIncidents[i].name, modifiedLastSync); //returns added comments since last sync
            if(newComments.length > 0) {
                newComments.forEach(function (comment) {
                    myObj.work_notes = '[code]<div class="snow"><b>CreatedTimeUtc: </b>' + comment.properties.createdTimeUtc + '<br><b>Author: </b>' + comment.properties.author.name + '(' + comment.properties.author.userPrincipalName + ')' + '<p><b>Message:</b><br>' + comment.properties.message + '</p></div>[/code]';
                    myObj.update();
                    addedComments++;
                });
            }

            // add new alerts sync
            var htmlAlerts = getIncidentAlerts(environment, incidents[i].name, 'html', modifiedLastSync);
            if(htmlAlerts) {
                myObj.setWorkflow(false);
                myObj.work_notes = '[code]<h2>Alerts (updated)</h2>' + htmlAlerts + '[/code]';
                myObj.update();

                // Add incident entities to Snow
                var htmlEntities = getIncidentEntities(environment, incidents[i].name, 'html');
                if(htmlEntities) {
                    myObj.setWorkflow(false);
                    myObj.work_notes = '[code]<h2>Entities (updated)</h2>' + htmlEntities + '[/code]';
                    myObj.update();
                }

                utils.log('Incident ' + myObj.number + ' has been updated with new alerts.');

            }


            if(addedComments > 0 || changes.length > 0) {
                utils.log('Incident ' + myObj.number + ' has been updated\nChanges: ' + JSON.stringify(changes) + '\nNew comments: ' + addedComments);
            }
            
        }
        else {
            var incidentToCreate = []; 
			incidentToCreate.push(modifiedIncidents[i]);
            createIncidents(environment, incidentToCreate);
        }
    }
    
    return updatedIncidents;
}

]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-02-10 12:36:40</sys_created_on>
        <sys_id>8744c9bc2fda6010b57ebab62799b63b</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>updateChangedIncidents</sys_name>
        <sys_package display_value="Microsoft Azure Sentinel" source="x_556309_microsoft">04ced1802f7d2010aab2d5ccf699b616</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Microsoft Azure Sentinel">04ced1802f7d2010aab2d5ccf699b616</sys_scope>
        <sys_update_name>sys_script_include_8744c9bc2fda6010b57ebab62799b63b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-03-26 13:11:16</sys_updated_on>
    </sys_script_include>
</record_update>
